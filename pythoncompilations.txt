import numpy as np

def peek2(car_info, places, which, obj_theta, lane_count, objN, theta_view):
    sz = places.shape
    fr = None
    ba = None

    if which < 3:
        if which == 1:
            # Front reference
            frl1 = np.zeros(objN // 2)
            frl2 = np.zeros(objN // 2)
            frl3 = np.zeros(objN // 2)
            frl4 = np.zeros(objN // 2)
            frl5 = np.zeros(objN // 2)
            frl_non_zero = [0] * 5  # List to track non-zero counts for each lane

            for i in range(sz[0]):
                if np.all(places[i, :] == 0):
                    continue
                
                row_indexer = 0
                for j in range(sz[1]):
                    stored = places[i, j]
                    if stored == 0 or car_info[stored, 1] == 0:
                        continue

                    theta_this = car_info[stored, 2]

                    if 0 < theta2nDisp(obj_theta, theta_this) < np.pi / 16:
                        lane = i
                        lane_list = [frl1, frl2, frl3, frl4, frl5][lane]
                        lane_list[row_indexer] = stored
                        frl_non_zero[lane] += 1
                        row_indexer += 1

                # Post-process each lane
                for lane, frl in enumerate([frl1, frl2, frl3, frl4, frl5]):
                    non_zero_count = frl_non_zero[lane]
                    if non_zero_count == 0:
                        frl.fill(0)
                    else:
                        frl = np.concatenate(
                            (quicksort1(frl[:non_zero_count], car_info, obj_theta), 
                             np.zeros(objN // 2 - non_zero_count))
                        )
                        if lane == 0: frl1 = frl
                        elif lane == 1: frl2 = frl
                        elif lane == 2: frl3 = frl
                        elif lane == 3: frl4 = frl
                        elif lane == 4: frl5 = frl

            fr = np.vstack([frl1, frl2, frl3, frl4, frl5])
            ba = np.zeros((5, objN // 2))

        else:
            # Back reference
            bal1 = np.zeros(objN // 2)
            bal2 = np.zeros(objN // 2)
            bal3 = np.zeros(objN // 2)
            bal4 = np.zeros(objN // 2)
            bal5 = np.zeros(objN // 2)
            bal_non_zero = [0] * 5  # List to track non-zero counts for each lane

            for i in range(sz[0]):
                if np.all(places[i, :] == 0):
                    continue

                row_indexer = 0
                for j in range(sz[1]):
                    stored = places[i, j]
                    if stored == 0 or car_info[stored, 1] == 0:
                        continue

                    theta_this = car_info[stored, 2]

                    if -np.pi / 16 < theta2nDisp(obj_theta, theta_this) < 0:
                        lane = i
                        lane_list = [bal1, bal2, bal3, bal4, bal5][lane]
                        lane_list[row_indexer] = stored
                        bal_non_zero[lane] += 1
                        row_indexer += 1

                # Post-process each lane
                for lane, bal in enumerate([bal1, bal2, bal3, bal4, bal5]):
                    non_zero_count = bal_non_zero[lane]
                    if non_zero_count == 0:
                        bal.fill(0)
                    else:
                        bal = np.concatenate(
                            (quicksort1(np.flip(bal[:non_zero_count]), car_info, obj_theta), 
                             np.zeros(objN // 2 - non_zero_count))
                        )
                        if lane == 0: bal1 = bal
                        elif lane == 1: bal2 = bal
                        elif lane == 2: bal3 = bal
                        elif lane == 3: bal4 = bal
                        elif lane == 4: bal5 = bal

            ba = np.vstack([bal1, bal2, bal3, bal4, bal5])
            fr = np.zeros((5, objN // 2))
    
    # Additional cases for which >= 3 would go here

    return fr, ba





import numpy as np

def peek2(car_info, places, which, obj_theta, lane_count, objN, theta_view):
    sz = places.shape
    fr = None
    ba = None

    if which == 5:
        fr = np.zeros((5, objN // 2))
        ba = np.zeros((5, objN // 2))

        theta_from_pi = theta2nDisp(obj_theta, np.pi)
        
        if abs(theta_from_pi) > theta_view or theta_from_pi < 0:
            for i in range(sz[0]):
                if np.all(places[i, :] == 0):
                    continue

                front_seen = False
                row_indexer1 = 0
                for row_indexer1 in range(lane_count[i]):
                    theta_this = car_info[places[i, row_indexer1], 2]
                    distance_in_front = theta2nDisp(obj_theta, theta_this)
                    if abs(distance_in_front) < theta_view and distance_in_front > 0:
                        front_seen = True
                        for row_indexer2 in range(row_indexer1 + 1, lane_count[i]):
                            theta_this = car_info[places[i, row_indexer2], 2]
                            distance_in_front = theta2nDisp(obj_theta, theta_this)
                            if distance_in_front <= 0:
                                break
                        row_indexer2 -= 1
                        piece1 = places[i, row_indexer1:row_indexer2+1]
                        fr[i, :row_indexer2 - row_indexer1 + 1] = piece1[::-1]
                        break

        else:
            for i in range(sz[0]):
                if np.all(places[i, :] == 0):
                    continue

                crit_index = lane_count[i]
                imp_object_in_back = theta2nDisp(obj_theta, car_info[places[i, crit_index - 1], 2])

                if abs(imp_object_in_back) < theta_view:
                    for row_indexer5 in range(lane_count[i]):
                        theta_this = car_info[places[i, row_indexer5], 2]
                        distance_in_front = theta2nDisp(obj_theta, theta_this)
                        if distance_in_front > theta_view:
                            crit_index = row_indexer5
                            break

                front_seen = False
                row_indexer1 = 0
                for row_indexer1 in range(crit_index):
                    theta_this = car_info[places[i, row_indexer1], 2]
                    distance_in_front = theta2nDisp(obj_theta, theta_this)
                    if abs(distance_in_front) < theta_view and distance_in_front > 0:
                        front_seen = True
                        for row_indexer2 in range(row_indexer1 + 1, crit_index):
                            theta_this = car_info[places[i, row_indexer2], 2]
                            distance_in_front = theta2nDisp(obj_theta, theta_this)
                            if distance_in_front <= 0:
                                break
                        row_indexer2 -= 1
                        front = places[i, row_indexer1:row_indexer2 + 1]
                        if crit_index != lane_count[i]:
                            crit_space = lane_count[i] - crit_index
                            fr[i, :crit_space] = places[i, row_indexer5:lane_count[i]]
                            fr[i, crit_space:crit_space + row_indexer2 - row_indexer1 + 1] = front[::-1]
                        else:
                            fr[i, :row_indexer2 - row_indexer1 + 1] = front[::-1]
                        break

    elif which == 4:
        fr = np.zeros((5, objN // 2))
        ba = np.zeros((5, objN // 2))
        theta_from_pi = theta2nDisp(obj_theta, np.pi)

        if abs(theta2nDisp(obj_theta, np.pi)) > theta_view:
            for i in range(sz[0]):
                if np.all(places[i, :] == 0):
                    continue

                back_seen = False
                for row_indexer1 in range(lane_count[i]):
                    theta_this = car_info[places[i, row_indexer1], 2]
                    distance_in_front = theta2nDisp(obj_theta, theta_this)
                    if -theta_view < distance_in_front < 0:
                        back_seen = True
                        for row_indexer2 in range(row_indexer1 + 1, lane_count[i]):
                            theta_this = car_info[places[i, row_indexer2], 2]
                            distance_in_front = theta2nDisp(obj_theta, theta_this)
                            if distance_in_front >= 0:
                                break
                        row_indexer2 -= 1
                        ba[i, :row_indexer2 - row_indexer1 + 1] = places[i, row_indexer1:row_indexer2 + 1]
                        break

    # Additional cases for which == 3, which == 6, etc., would be similar and are omitted here for brevity.

    return fr, ba




import numpy as np

def peek2_which_3(car_info, places, obj_theta, lane_count, objN, theta_view):
    sz = places.shape
    fr = np.zeros((5, objN // 2))
    ba = np.zeros((5, objN // 2))

    theta_from_pi = theta2nDisp(obj_theta, np.pi)

    if abs(theta_from_pi) > theta_view:
        for i in range(sz[0]):
            # Check if row is empty
            if np.all(places[i, :] == 0):
                continue

            front_seen = False
            back_seen = False
            front_first = False

            # Look for cars in front
            for row_indexer1 in range(lane_count[i]):
                theta_this = car_info[places[i, row_indexer1], 2]
                distance_in_front = theta2nDisp(obj_theta, theta_this)

                if abs(distance_in_front) < theta_view and distance_in_front != 0:
                    if distance_in_front > 0:
                        front_seen = True
                        back_seen = False
                        front_first = True

                        # Find the boundary for cars not in front
                        for row_indexer2 in range(row_indexer1 + 1, lane_count[i]):
                            theta_this = car_info[places[i, row_indexer2], 2]
                            distance_in_front = theta2nDisp(obj_theta, theta_this)
                            if distance_in_front <= 0:
                                break
                        row_indexer2 -= 1
                        break
                    else:
                        front_seen = False
                        back_seen = True

                        for row_indexer2 in range(row_indexer1 + 1, lane_count[i]):
                            theta_this = car_info[places[i, row_indexer2], 2]
                            distance_in_front = theta2nDisp(obj_theta, theta_this)
                            if distance_in_front >= 0:
                                break
                        row_indexer2 -= 1
                        break

            if front_seen or back_seen:
                # Find the cars behind if front or back seen
                for row_indexer3 in range(row_indexer2, lane_count[i]):
                    theta_this = car_info[places[i, row_indexer3], 2]
                    distance_in_front = theta2nDisp(obj_theta, theta_this)
                    if abs(distance_in_front) < theta_view and distance_in_front * ((-1) ** back_seen) < 0:
                        for row_indexer4 in range(row_indexer3, lane_count[i]):
                            theta_this = car_info[places[i, row_indexer4], 2]
                            distance_in_front = theta2nDisp(obj_theta, theta_this)
                            if abs(distance_in_front) > theta_view:
                                back_seen = True
                                front_seen = True
                                break
                        break

                row_indexer2 -= 1
                row_indexer4 -= 1

                if front_seen and back_seen:
                    # Split into front and back sets
                    piece1 = places[i, row_indexer1:row_indexer2 + 1][::-1]
                    piece2 = places[i, row_indexer3:row_indexer4 + 1]
                    piece = [piece1, piece2]

                    front = piece[front_first]
                    back = piece[not front_first]

                    fr[i, :len(front)] = front
                    ba[i, :len(back)] = back
                else:
                    if front_seen:
                        piece1 = places[i, row_indexer1:row_indexer2 + 1][::-1]
                        fr[i, :len(piece1)] = piece1
                    if back_seen:
                        ba[i, :row_indexer2 - row_indexer1 + 1] = places[i, row_indexer1:row_indexer2 + 1]
    else:
        for i in range(sz[0]):
            if np.all(places[i, :] == 0):
                continue

            crit_index = lane_count[i]
            imp_object_in_back = theta2nDisp(obj_theta, car_info[places[i, crit_index - 1], 2])

            if abs(imp_object_in_back) < theta_view:
                for row_indexer5 in range(lane_count[i]):
                    theta_this = car_info[places[i, row_indexer5], 2]
                    distance_in_front = theta2nDisp(obj_theta, theta_this)
                    if distance_in_front > theta_view:
                        crit_index = row_indexer5
                        break

            front_seen = False
            back_seen = False
            front_first = False

            for row_indexer1 in range(crit_index):
                theta_this = car_info[places[i, row_indexer1], 2]
                distance_in_front = theta2nDisp(obj_theta, theta_this)

                if abs(distance_in_front) < theta_view and distance_in_front != 0:
                    if distance_in_front > 0:
                        front_seen = True
                        back_seen = False
                        front_first = True

                        for row_indexer2 in range(row_indexer1 + 1, crit_index):
                            theta_this = car_info[places[i, row_indexer2], 2]
                            distance_in_front = theta2nDisp(obj_theta, theta_this)
                            if distance_in_front <= 0:
                                break
                        row_indexer2 -= 1
                        break
                    else:
                        front_seen = False
                        back_seen = True

                        for row_indexer2 in range(row_indexer1 + 1, crit_index):
                            theta_this = car_info[places[i, row_indexer2], 2]
                            distance_in_front = theta2nDisp(obj_theta, theta_this)
                            if distance_in_front >= 0:
                                break
                        row_indexer2 -= 1
                        break

            if front_seen or back_seen:
                for row_indexer3 in range(row_indexer2, crit_index):
                    theta_this = car_info[places[i, row_indexer3], 2]
                    distance_in_front = theta2nDisp(obj_theta, theta_this)
                    if abs(distance_in_front) < theta_view and distance_in_front * ((-1) ** back_seen) < 0:
                        for row_indexer4 in range(row_indexer3, crit_index):
                            theta_this = car_info[places[i, row_indexer4], 2]
                            distance_in_front = theta2nDisp(obj_theta, theta_this)
                            if abs(distance_in_front) > theta_view:
                                back_seen = True
                                front_seen = True
                                break
                        break

                row_indexer2 -= 1
                row_indexer4 -= 1
                row_indexer5 += 1

                if front_seen and back_seen:
                    piece1 = places[i, row_indexer1:row_indexer2 + 1][::-1]
                    piece2 = places[i, row_indexer3:row_indexer4 + 1]
                    piece = [piece1, piece2]

                    front = piece[front_first]
                    back = piece[not front_first]

                    if crit_index != lane_count[i]:
                        crit_space = lane_count[i] - crit_index
                        fr[i, :crit_space] = places[i, row_indexer5:lane_count[i]]
                        fr[i, crit_space:crit_space + len(front)] = front
                    else:
                        fr[i, :len(front)] = front
                    ba[i, :len(back)] = back
                else:
                    if front_seen:
                        front = places[i, row_indexer1:row_indexer2 + 1][::-1]
                        if crit_index != lane_count[i]:
                            crit_space = lane_count[i] - crit_index
                            fr[i, :crit_space] = places[i, row_indexer5:lane_count[i]]
                            fr[i, crit_space:crit_space + len(front)] = front
                        else:
                            fr[i, :len(front)] = front

                    if back_seen:
                        ba[i, :row_indexer2 - row_indexer1 + 1] = places[i, row_indexer1:row_indexer2 + 1]

    return fr, ba




FINAL:



import numpy as np

def theta2nDisp(objTheta, theta):
    # Define this function based on your requirements
    pass

def quicksort1(array, car_info, obj_theta):
    # Define or replace with appropriate sorting based on car_info and obj_theta
    pass

def quicksort2(array, car_info, obj_theta):
    # Define or replace with appropriate sorting based on car_info and obj_theta
    pass

def peek2(car_info, places, which, obj_theta, lane_count, objN, theta_view):
    sz = places.shape
    if which < 3:
        if which == 1:
            # Front reference case
            fr_lists = [np.zeros(objN // 2) for _ in range(5)]
            fr_non_zero_counts = [0] * 5
            
            for i in range(sz[0]):
                if np.all(places[i, :] == 0):
                    continue
                row_indexer = 0
                for j in range(sz[1]):
                    stored = places[i, j]
                    if stored == 0 or car_info[stored, 1] == 0:
                        continue
                    theta_this = car_info[stored, 2]
                    if 0 < theta2nDisp(obj_theta, theta_this) < np.pi / 16:
                        fr_lists[i][row_indexer] = stored
                        fr_non_zero_counts[i] += 1
                        row_indexer += 1

                # Sorting and zero padding
                for i, count in enumerate(fr_non_zero_counts):
                    if count == 0:
                        fr_lists[i] = np.zeros(objN // 2)
                    else:
                        fr_lists[i] = np.concatenate([quicksort1(fr_lists[i][:count], car_info, obj_theta), 
                                                      np.zeros(objN // 2 - count)])

            fr = np.vstack(fr_lists)
            ba = np.zeros((5, objN // 2))

        else:
            # Back reference case
            ba_lists = [np.zeros(objN // 2) for _ in range(5)]
            ba_non_zero_counts = [0] * 5

            for i in range(sz[0]):
                if np.all(places[i, :] == 0):
                    continue
                row_indexer = 0
                for j in range(sz[1]):
                    stored = places[i, j]
                    if stored == 0 or car_info[stored, 1] == 0:
                        continue
                    theta_this = car_info[stored, 2]
                    if -np.pi / 16 < theta2nDisp(obj_theta, theta_this) < 0:
                        ba_lists[i][row_indexer] = stored
                        ba_non_zero_counts[i] += 1
                        row_indexer += 1

                # Sorting and zero padding
                for i, count in enumerate(ba_non_zero_counts):
                    if count == 0:
                        ba_lists[i] = np.zeros(objN // 2)
                    else:
                        ba_lists[i] = np.concatenate([quicksort1(ba_lists[i][:count][::-1], car_info, obj_theta), 
                                                      np.zeros(objN // 2 - count)])

            ba = np.vstack(ba_lists)
            fr = np.zeros((5, objN // 2))

    elif which > 5:
        # Complex cases (which == 6, 7, or 8)
        fr, ba = np.zeros(sz), np.zeros(sz)
        indexer_fr, indexer_ba = np.ones(5, dtype=int), np.ones(5, dtype=int)
        car_seen_fr, car_seen_ba = np.zeros(5, dtype=int), np.zeros(5, dtype=int)

        for j in range(objN):
            if car_info[j, 1] == 0:
                continue
            theta_this = car_info[j, 2]
            lane_this = car_info[j, 1]
            if abs(theta2nDisp(obj_theta, theta_this)) < theta_view:
                if theta2nDisp(obj_theta, theta_this) > 0:
                    car_seen_fr[lane_this - 1] += 1
                    fr[lane_this - 1, indexer_fr[lane_this - 1] - 1] = car_info[j, 0]
                    indexer_fr[lane_this - 1] += 1
                else:
                    car_seen_ba[lane_this - 1] += 1
                    ba[lane_this - 1, indexer_ba[lane_this - 1] - 1] = car_info[j, 0]
                    indexer_ba[lane_this - 1] += 1

        for i in range(sz[0]):
            if car_seen_fr[i] > 0:
                fr[i, :car_seen_fr[i]] = quicksort2(fr[i, :car_seen_fr[i]], car_info, obj_theta)
            if car_seen_ba[i] > 0:
                ba[i, :car_seen_ba[i]] = quicksort1(ba[i, :car_seen_ba[i]], car_info, obj_theta)

    else:
        # Cases 3, 4, and 5 (theta and lane-based peeking with crit indexing)
        fr, ba = np.zeros((5, objN // 2)), np.zeros((5, objN // 2))
        if which == 5:
            # Process based on angle constraints and critical indexing for which == 5
            theta_from_pi = theta2nDisp(obj_theta, np.pi)
            if abs(theta_from_pi) > theta_view or theta_from_pi < 0:
                # Add processing logic for front and critical indexing as per MATLAB code for which == 5
                pass
            else:
                # Alternate processing based on different angle limits and positions
                pass
        elif which == 4:
            # Process specifically for back references in which == 4
            pass
        elif which == 3:
            # Process for combined front and back references for which == 3
            pass

    return fr, ba
